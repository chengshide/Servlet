<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
     
     <!-- 配置spring的IOC，把service对象配置进来 -->
     <bean id="accountService" class="com.icoom.service.impl.AccountServiceImpl"></bean>
     
     <!-- 配置spring中基于xml的aop配置步骤
                       把通知bean交给spring来管理
                       使用aop:config标签表明开始aop的配置
                       使用aop:aspect标签表明配置切面
                       id属性：给切面提供一个唯一标识
                       ref属性：指定通知类bean的Id
                       在aop:aspect标签内部使用对应标签配置通知类型
                       aop:before:表示配置前置通知 
                             method属性:用于指定类中哪个方法是前置通知
                             pointcut属性：用于指定切入点表达式，表达式的含义指的是对业务层中哪些方法增强
             
                             切入点表达式的写法：
                                      关键字：execution（表达式）
                                      表达式：访问修饰符  返回值  包名.包名...类名.方法名(参数列表)
                                             访问修饰符可以省略，
                                             返回值可以使用通配符，表示任意返回值
                                             包名可以使用通配符，表示任意包，但是有几级包就需要写几个*.
                                             包名可以使用..表示当前包及其子包
                                             类名和方法名都可以使用*来实现通配
                                             参数列表：
                                                         可以直接写数据类型：
                                                                基本类型直接写名称        int
                                                                引用类型直接写包名.类名的方式      java.lang.String
                                                         可以使用通配符表示任意类型，但是必须有参数
                                                         可以使用..表示有无参数均可，有参数可以是任意类型
                                      全通配写法：* *..*.*(..)
                                      
                                      实际开发中切入点表达式通常写法：
                                                切到业务层实现类下的所有方法
      -->
      
      <!-- 配置Logger类 -->
      <bean id="logger" class="com.icoom.utils.Logger"></bean>
      
      <!-- 配置aop -->
      <aop:config>
       
        <!-- 配置切入点表达式 -->
        <aop:pointcut expression="execution(* com.icoom.service.impl.*.*(..))" id="pt1"/>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
          <!-- 配置前置通知:在切入点方法执行之前执行
          <aop:before method="beforePrintLog" pointcut-ref="pt1" />-->
          
          <!-- 配置后置通知：在切入点方法正常执行之后执行
          <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1" /> -->
          
          <!-- 配置异常通知：在切入点方法执行产生异常之后执行
          <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1" /> -->
          
          <!-- 配置最终通知：无论切入点是否正常执行都会在其后面执行
          <aop:after method="afterPrintLog" pointcut-ref="pt1" /> -->
         
          <!-- 配置环绕通知 -->
          <aop:around method="aroundPrintLog" pointcut-ref="pt1" />
          
        </aop:aspect>
      </aop:config>
</beans>